useContext is a React Hook that lets you read and subscribe to context from your component.

//Syntax
const value = useContext(SomeContext);


//Reference
useContext(SomeContext)
Call useContext at the top level of your component to read and subscribe to context.

import { useContext } from 'react';

function MyComponent() {
  const theme = useContext(ThemeContext);
  // ...

//Parameters 
SomeContext: The context that you’ve previously created with createContext.
The context itself does not hold the information,
it only represents the kind of information you can provide or read from components.

//Returns
useContext returns the context value for the calling component.
It is determined as the value passed to the closest SomeContext.
Provider above the calling component in the tree.
If there is no such provider, then the returned value will be the defaultValue you have passed to createContext for that context.
The returned value is always up-to-date.
React automatically re-renders components that read some context if it changes.


//Usage
Passing data deeply into the tree 
Call useContext at the top level of your component to read and subscribe to context.
import { useContext } from 'react';

function Button() {
  const theme(context value) = useContext(ThemeContext);
  // ...

useContext returns the context value for the context you passed.
To determine the context value, React searches the component tree and finds the closest context provider above for that particular context.
To pass context to a Button, wrap it or one of its parent components into the corresponding context provider:

function MyPage() {
  return (
    <ThemeContext.Provider value="dark">
      <Form />
    </ThemeContext.Provider>
  );
}

function Form() {
  // ... renders buttons inside ...
}

It doesn’t matter how many layers of components there are between the provider and the Button.
When a Button anywhere inside of Form calls useContext(ThemeContext), 
it will receive "dark" as the value.


//pitfall
useContext() always looks for the closest provider above the component that calls it. 
It searches upwards and does not consider providers in the component from which you’re calling useContext().
