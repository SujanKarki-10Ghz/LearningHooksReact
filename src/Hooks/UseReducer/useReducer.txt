//Intro
useReducer is a React Hook that lets you add a reducer to your component.

//syntax
const [state, dispatch] = useReducer(reducer, initialArg, init?)

//Reference 
useReducer(reducer, initialArg, init?)

Call useReducer at the top level of your component to manage its state with a reducer.

import { useReducer } from 'react';

function reducer(state, action) {
  // ...
}

function MyComponent() {
  const [state, dispatch] = useReducer(reducer, { age: 42 });
  // ...

//Parameters
- reducer: The reducer function that specifies how the state gets updated.
It must be pure, should take the state and action as arguments,
and should return the next state. State and action can be of any types.

-initialArg: The value from which the initial state is calculated.
 It can be a value of any type.
 How the initial state is calculated from it depends on the next init argument.

 -optional init: The initializer function that should return the initial state.
  If itâ€™s not specified, the initial state is set to initialArg. 
 Otherwise, the initial state is set to the result of calling init(initialArg).

 //Returns 
 useReducer returns an array with exactly two values:
 -The current state. During the first render, itâ€™s set to init(initialArg) or initialArg (if thereâ€™s no init).
 -The dispatch function that lets you update the state to a different value and trigger a re-render.

 /*dispatch function 
    The dispatch function returned by useReducer lets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to the dispatch function:

    const [state, dispatch] = useReducer(reducer, { age: 42 });

    function handleClick() {
    dispatch({ type: 'incremented_age' });
    // ...
    React will set the next state to the result of calling the reducer function youâ€™ve provided with the current state and the action youâ€™ve passed to dispatch.

    Parameters:
    action: The action performed by the user.
    It can be a value of any type.
    By convention, an action is usually an object with a type property identifying it and,
    optionally, other properties with additional information.

    Returns:
    dispatch functions do not have a return value.

    */

    //PITFALLS  
    State is read-only. Donâ€™t modify any objects or arrays in state:
    function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      // ðŸš© Don't mutate an object in state like this:
      state.age = state.age + 1;
      return state;
    }

    Instead, always return new objects from your reducer:
    function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      // âœ… Instead, return a new object
      return {
        ...state,
        age: state.age + 1
      };
    }